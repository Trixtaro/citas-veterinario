{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propetario","fecha","hora","sintomas","cita","actualizarCita","error","notificarError","actualizarState","event","target","name","value","className","action","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","elminarCita","onClick","propType","PropTypes","object","isRequired","func","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","console","log","NuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.62bf3c22.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Formulario = ({ crearCita }) => {\r\n    // Crear el state de citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propetario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n    const [ error, notificarError ] = useState(false);\r\n    const actualizarState = (event) => { // Función que actualizar el state\r\n        actualizarCita({\r\n            ...cita,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    }\r\n    const { mascota, propetario, fecha, hora, sintomas } = cita;\r\n    const validarCita = (event) => { // Función que valida la cita\r\n        event.preventDefault();\r\n        // Validar\r\n        if(mascota.trim() === '' || propetario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            notificarError(true); // Notificar Error\r\n            return;\r\n        }\r\n        notificarError(false);\r\n        cita.id = uuidv4(); // Asignar un id\r\n        crearCita(cita); // Crear una cita\r\n        actualizarCita({\r\n            mascota: '',\r\n            propetario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null }\r\n            <form action=\"\"\r\n                onSubmit={validarCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n                <label>Nombre del Dueño</label>\r\n                <input type=\"text\"\r\n                    name=\"propetario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del Dueño de la mascota\"\r\n                    onChange={actualizarState}\r\n                    value={propetario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                />\r\n                <button type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar cita</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Formulario;\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, elminarCita}) => {\r\n    const { mascota, propetario, fecha, hora, sintomas } = cita;\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{ mascota }</span></p>\r\n            <p>Dueño: <span>{ propetario }</span></p>\r\n            <p>Fecha: <span>{ fecha }</span></p>\r\n            <p>Hora: <span>{ hora }</span></p>\r\n            <p>Sintomas: <span>{ sintomas }</span></p>\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={ () => elminarCita(cita.id) }\r\n            >Eliminar &times;</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nCita.propType = {\r\n    cita: PropTypes.object.isRequired,\r\n    elminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\nimport PropTypes from 'prop-types'\n\nfunction App() {\n  let citasIniciales = JSON.parse(localStorage.getItem('citas')); // Citas iniciales en localStorage\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n  const [citas, guardarCitas] = useState(citasIniciales);\n  useEffect(() => {\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n    console.log('listo');\n  }, [citas])\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  }\n  const elminarCita = (id) => { // Función para elimnar cita\n    const NuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(NuevasCitas);\n  }\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{ titulo }</h2>\n            {\n              citas.map(cita => (\n                <Cita\n                  key={cita.id}\n                  cita={cita}\n                  elminarCita={elminarCita}\n                />\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nFormulario.propType = {\n  crearCita: PropTypes.func.isRequired\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}